// Scala implementation of Max Entropy Markov Model
package MEMM;

import org.apache.spark.rdd.RDD

import scala.math
import util.Random


import scala.collection.mutable.ArrayBuffer

import breeze.linalg.{DenseVector => BDV}
import breeze.optimize.{CachedDiffFunction, DiffFunction, LBFGS => BreezeLBFGS}

import org.apache.spark.Logging
import org.apache.spark.mllib.linalg.{Vector, Vectors}
// import MEMM.BLAS
import org.apache.spark.mllib.optimization.Updater

class Gradient(get_features: (String, Vector[String]) => Array[Double], 
			training : RDD[(String,Vector[String])],
			no_of_features : Int,
			label_set : collection.mutable.Set[String]) {

    def compute(data: RDD[Vector[Any]], label: String, weights: Vector[Double], 
    	cumGradient: Vector[Double]): Double = {

    	return Random.nextDouble()
    }

    def get_cost(param : Vector[Double]) : Double = {
    	return Random.nextInt(500)
    }

    def get_gradient(param : Vector[Double]) : Vector[Double] = {
    	var grad = new Array[Double](no_of_features)
		for (i <- 1 to no_of_features){
			grad(i) = Random.nextDouble()
		}
		return grad.toVector()
    }

}


class MEMM(get_features: (String, Vector[String]) => Array[Double], 
	dataset : RDD[(String,Vector[String])],no_of_features : Int) {
		
		var parameters : Array[Int] = new Array[Int](no_of_features);
		var input_sequence = dataset
		// var output_labels = tags
		// var output_label_set  = input_sequence.countApproxDistinctByKey(0.5)

			
}

object MEMM {
		  def train(get_features: (String, Vector[String]) => Array[Double], 
			training : RDD[(String,Vector[String])],
			no_of_features : Int,
			label_set : collection.mutable.Set[String],
			updater : Updater): Unit = {
		
		val memm = new MEMM(get_features, dataset, no_of_features)
		// println(memm.output_label_set)
    	// val test = Vectors.fromBreeze(weights)
		
		val numCorrections = 10
		val convergenceTol = 1e-4
		val maxNumIterations = 20
		val regParam = 0.1
		val initialWeights = Vectors.dense(new Array[Double](no_of_features))

		val (weightsWithIntercept, loss) = LBFGS.runLBFGS(
		  training,
		  new Gradient(get_features, training, no_of_features, label_set),
		  updater,
		  numCorrections,
		  convergenceTol,
		  maxNumIterations,
		  regParam,
		  initialWeights)
					    
		  }
		}

class LBFGS() extends Logging{
	  /**
   * Run Limited-memory BFGS (L-BFGS) in parallecollection.mutable.Set[String]l.
   * Averaging the subgradients over different partitions is performed using one standard
   * spark map-reduce in each iteration.
   *
   * @param data - Input data for L-BFGS. RDD of the set of data examples, each of
   *               the form (label, [feature values]).
   * @param gradient - Gradient object (used to compute the gradient of the loss function of
   *                   one single data example)
   * @param updater - Updater function to actually perform a gradient step in a given direction.
   * @param numCorrections - The number of corrections used in the L-BFGS update.
   * @param convergenceTol - The convergence tolerance of iterations for L-BFGS which is must be
   *                         nonnegative. Lower values are less tolerant and therefore generally
   *                         cause more iterations to be run.
   * @param maxNumIterations - Maximal number of iterations that L-BFGS can be run.
   * @param regParam - Regularization parameter
   *
   * @return A tuple containing two elements. The first element is a column matrix containing
   *         weights for every feature, and the second element is an array containing the loss
   *         computed for every iteration.
   */
  def runLBFGS(
      data: RDD[(String, Vector[String])],
      gradient: Gradient,
      updater: Updater,
      numCorrections: Int,
      convergenceTol: Double,
      maxNumIterations: Int,
      regParam: Double,
      initialWeights: Vector[String]): (Vector, Array[Double]) = {

    val lossHistory = new ArrayBuffer[Double](maxNumIterations)

    val numExamples = data.count()

    val costFun =
      new CostFun(data, gradient, updater, regParam, numExamples)

    val lbfgs = new BreezeLBFGS[BDV[Double]](maxNumIterations, numCorrections, convergenceTol)

    val states =
      lbfgs.iterations(new CachedDiffFunction(costFun), initialWeights.toBreeze.toDenseVector)

    /**
     * NOTE: lossSum and loss is computed using the weights from the previous iteration
     * and regVal is the regularization value computed in the previous iteration as well.
     */
    var state = states.next()
    while(states.hasNext) {
      lossHistory.append(state.value)
      state = states.next()
    }
    lossHistory.append(state.value)
    val weights = Vectors.fromBreeze(state.x)

    logInfo("LBFGS.runLBFGS finished. Last 10 losses %s".format(
      lossHistory.takeRight(10).mkString(", ")))

    (weights, lossHistory.toArray)
  }

  /**
   * CostFun implements Breeze's DiffFunction[T], which returns the loss and gradient
   * at a particular point (weights). It's used in Breeze's convex optimization routines.
   */
  private class CostFun(
    data: RDD[(String, Vector[String])],
    gradient: Gradient,
    updater: Updater,
    regParam: Double,
    numExamples: Long) extends DiffFunction[BDV[Double]] {

  	val f2jBLAS: NetlibBLAS = new F2jBLAS

  	private def axpy(a: Double, x: DenseVector, y: DenseVector): Unit = {
    val n = x.size
    f2jBLAS.daxpy(n, a, x.values, 1, y.values, 1)
  }

    override def calculate(weights: BDV[Double]): (Double, BDV[Double]) = {
      // Have a local copy to avoid the serialization of CostFun object which is not serializable.
      val w = Vectors.fromBreeze(weights)
      val n = w.size
      val bcW = data.context.broadcast(w)
      val localGradient = gradient

      // val (gradientSum, lossSum) = data.treeAggregate((Vectors.zeros(n), 0.0))(
      //     seqOp = (c, v) => (c, v) match { case ((grad, loss), (label, features)) =>
      //       val l = localGradient.compute(
      //         features, label, bcW.value, grad)
      //       (grad, loss + l)
      //     },
      //     combOp = (c1, c2) => (c1, c2) match { case ((grad1, loss1), (grad2, loss2)) =>
      //       axpy(1.0, grad2, grad1)
      //       (grad1, loss1 + loss2)
      //     })
	val gradientSum = gradient.get_gradient(w)
	val lossSum = gradient.get_cost(w)

      /**
       * regVal is sum of weight squares if it's L2 updater;
       * for other updater, the same logic is followed.
       */
      val regVal = updater.compute(w, Vectors.zeros(n), 0, 1, regParam)._2

      val loss = lossSum / numExamples + regVal
      /**
       * It will return the gradient part of regularization using updater.
       *
       * Given the input parameters, the updater basically does the following,
       *
       * w' = w - thisIterStepSize * (gradient + regGradient(w))
       * Note that regGradient is function of w
       *
       * If we set gradient = 0, thisIterStepSize = 1, then
       *
       * regGradient(w) = w - w'
       *
       * TODO: We need to clean it up by separating the logic of regularization out
       *       from updater to regularizer.
       */
      // The following gradientTotal is actually the regularization part of gradient.
      // Will add the gradientSum computed from the data with weights in the next step.
      val gradientTotal = w.copy
      axpy(-1.0, updater.compute(w, Vectors.zeros(n), 1, 1, regParam)._1, gradientTotal)

      // gradientTotal = gradientSum / numExamples + gradientTotal
      axpy(1.0 / numExamples, gradientSum, gradientTotal)

      (loss, gradientTotal.toBreeze.asInstanceOf[BDV[Double]])
    }
  }
}
